import os
import logging
import asyncio
import threading
import time
import re
import random
import json
from datetime import datetime, timedelta
from http.server import BaseHTTPRequestHandler, HTTPServer
from openai import OpenAI
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    BotCommand,
    constants
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = os.getenv("TG_TOKEN")
NOVITA_API_KEY = os.getenv("NOVITA_API_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME", "@aliceneyrobot")

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
DEVELOPER_ID = 1040929628

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
UNLIMITED_CHAT_ID = -1001481824277

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
SELECT_USER, SELECT_ACTION, INPUT_AMOUNT = range(3)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_contexts = {}
daily_message_counters = {}  # –§–æ—Ä–º–∞—Ç: {(user_id, date): count}
user_bonus_messages = {}    # –§–æ—Ä–º–∞—Ç: {(user_id, date): bonus_count}
user_referrals = {}         # –§–æ—Ä–º–∞—Ç: {referrer_id: count}
user_invited_by = {}        # –§–æ—Ä–º–∞—Ç: {invited_user_id: referrer_id}
last_cleanup_time = time.time()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
REF_DATA_FILE = "ref_data.json"

# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
EMOJI_LIST = ["üòä", "üòÇ", "üòç", "ü§î", "üòé", "üëç", "‚ù§Ô∏è", "‚ú®", "üéâ", "üíî"]

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def load_ref_data():
    global user_referrals, user_invited_by
    try:
        if os.path.exists(REF_DATA_FILE):
            with open(REF_DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                user_referrals = data.get("user_referrals", {})
                user_invited_by = data.get("user_invited_by", {})
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –≤ int (JSON —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
                user_referrals = {int(k): v for k, v in user_referrals.items()}
                user_invited_by = {int(k): int(v) for k, v in user_invited_by.items()}
            logger.info("Ref data loaded successfully")
    except Exception as e:
        logger.error(f"Error loading ref data: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def save_ref_data():
    try:
        data = {
            "user_referrals": user_referrals,
            "user_invited_by": user_invited_by
        }
        with open(REF_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info("Ref data saved successfully")
    except Exception as e:
        logger.error(f"Error saving ref data: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
try:
    with open("persona.txt", "r", encoding="utf-8") as f:
        PERSONA = f.read().strip()
    PERSONA += "\n\n–¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ —á–∞—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∏–º –ø–æ –∏–º–µ–Ω–∞–º. " \
               "–£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ. " \
               "–í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. " \
               "–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∞–±–∑–∞—Ü–∞–º–∏ –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
except Exception as e:
    logger.error(f"Error loading persona: {e}")
    PERSONA = "–¢—ã –¥–µ–≤—É—à–∫–∞, —Ç–µ–±–µ 18 –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞ –î–≤–∞—á–µ–≤—Å–∫–∞—è, —É —Ç–µ–±—è –≥—Ä—É–±—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –Ω–æ —Ä–∞–Ω–∏–º–∞—è –Ω–∞—Ç—É—Ä–∞. " \
              "–¢—ã –æ–±—â–∞–µ—à—å—Å—è –≤ —á–∞—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∏–º –∏–Ω–æ–≥–¥–∞ –ø–æ –∏–º–µ–Ω–∞–º. " \
              "–£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ. " \
              "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∏—Ö –∏–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò–º—è: —Ç–µ–∫—Å—Ç'. " \
              "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–∏—Å—ã–≤–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–µ–π—Å—Ç–≤–∏–µ*. " \
              "–í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é. " \
              "–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∞–±–∑–∞—Ü–∞–º–∏ –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
def cleanup_old_counters():
    global daily_message_counters, user_bonus_messages, last_cleanup_time
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    if current_time - last_cleanup_time > 1800:
        logger.info("Starting cleanup of old message counters")
        today = datetime.utcnow().date()
        keys_to_delete = []
        
        # –û—á–∏—Å—Ç–∫–∞ daily_message_counters
        for key in list(daily_message_counters.keys()):
            user_id, date_str = key
            try:
                record_date = datetime.strptime(date_str, "%Y-%m-%d").date()
                if (today - record_date).days > 1:
                    keys_to_delete.append(key)
                    del daily_message_counters[key]
            except ValueError:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∫–ª—é—á–∏
                del daily_message_counters[key]
                logger.warning(f"Removed invalid key: {key}")
        
        # –û—á–∏—Å—Ç–∫–∞ user_bonus_messages
        for key in list(user_bonus_messages.keys()):
            user_id, date_str = key
            try:
                record_date = datetime.strptime(date_str, "%Y-%m-%d").date()
                if (today - record_date).days > 1:
                    if key not in keys_to_delete:
                        keys_to_delete.append(key)
                    del user_bonus_messages[key]
            except ValueError:
                del user_bonus_messages[key]
                logger.warning(f"Removed invalid key: {key}")
        
        last_cleanup_time = current_time
        logger.info(f"Cleanup completed. Removed {len(keys_to_delete)} old counters")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def check_message_limit(user_id: int) -> bool:
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = (user_id, today)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    cleanup_old_counters()
    
    # –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç
    base_limit = 35
    
    # –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referral_bonus = user_referrals.get(user_id, 0) * 3
    
    # –ë–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    bonus_messages = user_bonus_messages.get(key, 0)
    
    # –û–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ª–∏–º–∏—Ç
    total_limit = base_limit + referral_bonus + bonus_messages
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
    if key not in daily_message_counters:
        daily_message_counters[key] = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if daily_message_counters[key] >= total_limit:
        return False
    
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
    daily_message_counters[key] += 1
    logger.info(f"User {user_id} message count: {daily_message_counters[key]}/{total_limit} (base: {base_limit}, referrals: {referral_bonus}, bonus: {bonus_messages})")
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
def format_actions(text: str) -> str:
    # –ü—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–µ–π—Å—Ç–≤–∏–µ*
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
def add_emojis(text: str) -> str:
    if not text:
        return text
    
    if random.random() < 0.2:
        selected_emoji = random.choice(EMOJI_LIST)
        if text[-1] not in EMOJI_LIST:
            return text + selected_emoji
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
def complete_sentences(text: str) -> str:
    if not text:
        return text
    
    if not re.search(r'[.!?‚Ä¶]$', text):
        text += '.'
    
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–±–∑–∞—Ü–µ–≤
def format_paragraphs(text: str) -> str:
    paragraphs = text.split('\n\n')
    formatted = []
    for paragraph in paragraphs:
        if paragraph.strip():
            cleaned = re.sub(r'\s+', ' ', paragraph).strip()
            formatted.append(cleaned)
    
    return '\n\n'.join(formatted)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
def clean_response(response: str) -> str:
    cleaned = re.sub(r'<think>.*?</think>', '', response, flags=re.DOTALL)
    cleaned = cleaned.replace('<think>', '').replace('</think>', '')
    cleaned = cleaned.replace('</s>', '').replace('<s>', '')
    
    cleaned = format_actions(cleaned)
    cleaned = re.sub(r'\n\s*\n', '\n\n', cleaned).strip()
    cleaned = complete_sentences(cleaned)
    cleaned = format_paragraphs(cleaned)
    cleaned = add_emojis(cleaned)
    
    return cleaned

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Service is alive')
    
    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_http_server(port=8080):
    server_address = ('', port)
    httpd = HTTPServer(server_address, HealthHandler)
    logger.info(f"Starting HTTP health check server on port {port}")
    httpd.serve_forever()

# –ó–∞–ø—Ä–æ—Å –∫ DeepSeek —á–µ—Ä–µ–∑ Novita API
def query_chat(messages: list) -> str:
    try:
        client = OpenAI(
            base_url="https://api.novita.ai/v3/openai",
            api_key=NOVITA_API_KEY,
        )
        
        response = client.chat.completions.create(
            model="deepseek/deepseek-r1-0528",
            messages=messages,
            temperature=0.7,
            max_tokens=600,
            stream=False,
            response_format={"type": "text"}
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"Novita API error: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    if context.args and context.args[0].isdigit():
        referrer_id = int(context.args[0])
        if referrer_id != user.id and user.id not in user_invited_by:
            user_invited_by[user.id] = referrer_id
            user_referrals[referrer_id] = user_referrals.get(referrer_id, 0) + 1
            logger.info(f"New referral: user {user.id} invited by {referrer_id}")
            save_ref_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞, –µ—Å–ª–∏ –ø–æ—Å–º–µ–µ—à—å –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ —Ç–æ –ø–æ–ª—É—á–∏—à—å –ø–∞—Ä—É –∫—Ä–µ–ø–∫–∏—Ö —É–¥–∞—Ä–æ–≤!\n\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ –∏ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ –º–Ω–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n"
        "/stat - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/ref - –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", url="https://telegra.ph/Ob-Alise-Dvachevskoj-07-09")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ùóÔ∏è–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.",
        reply_markup=reply_markup
    )

async def ref_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    bot_username = (await context.bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start={user.id}"
    count = user_referrals.get(user.id, 0)
    
    await update.message.reply_text(
        f"üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"‚Ä¢ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>{ref_link}</code>\n"
        f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}\n"
        f"‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ +3 —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!",
        parse_mode="HTML"
    )

async def clear_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat_id
    key = (chat_id, user.id)
    
    if key in user_contexts:
        del user_contexts[key]
        logger.info(f"Context cleared for user {user.full_name} in chat {chat_id}")
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!")
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å–æ –º–Ω–æ–π!")

async def stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = (user.id, today)
    
    has_context = any(ctx_key[1] == user.id for ctx_key in user_contexts.keys())
    
    used_messages = daily_message_counters.get(key, 0)
    
    base_limit = 35
    referral_bonus = user_referrals.get(user.id, 0) * 3
    bonus_messages = user_bonus_messages.get(key, 0)
    total_limit = base_limit + referral_bonus + bonus_messages
    remaining = max(0, total_limit - used_messages)
    
    message = (
        f"üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b>\n\n"
        f"‚Ä¢ –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç: {base_limit}\n"
        f"‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: +{referral_bonus} (–ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {user_referrals.get(user.id, 0)})\n"
        f"‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: +{bonus_messages}\n"
        f"‚Ä¢ –ò—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{total_limit}</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_messages}\n"
        f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: <b>{remaining}</b>\n\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' if has_context else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üí° –î–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: /ref"
    )
    
    await update.message.reply_text(message, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dev
async def dev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    if user.id != DEVELOPER_ID:
        logger.warning(f"User {user.id} tried to access dev command")
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await update.message.reply_text(
        "üîß <b>–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:",
        parse_mode="HTML"
    )
    
    return SELECT_USER

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def select_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    
    if not user_input.isdigit():
        await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return SELECT_USER
    
    user_id = int(user_input)
    context.user_data['target_user_id'] = user_id
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="add_messages")],
        [InlineKeyboardButton("‚ûñ –£–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="remove_messages")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üë§ –í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
    return SELECT_ACTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data
    context.user_data['action'] = action
    
    action_text = "–¥–æ–±–∞–≤–∏—Ç—å" if action == "add_messages" else "—É–±—Ä–∞—Ç—å"
    
    await query.edit_message_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {action_text}:"
    )
    
    return INPUT_AMOUNT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def input_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    
    if not user_input.isdigit():
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return INPUT_AMOUNT
    
    amount = int(user_input)
    target_user_id = context.user_data['target_user_id']
    action = context.user_data['action']
    today = datetime.utcnow().strftime("%Y-%m-%d")
    key = (target_user_id, today)
    
    if key not in user_bonus_messages:
        user_bonus_messages[key] = 0
    
    if action == "add_messages":
        user_bonus_messages[key] += amount
        action_result = "–¥–æ–±–∞–≤–ª–µ–Ω—ã"
    else:
        user_bonus_messages[key] = max(0, user_bonus_messages[key] - amount)
        action_result = "—É–±—Ä–∞–Ω—ã"
    
    current_bonus = user_bonus_messages[key]
    base_limit = 35
    referral_bonus = user_referrals.get(target_user_id, 0) * 3
    total_limit = base_limit + referral_bonus + current_bonus
    
    report = (
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ!\n\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {target_user_id}\n"
        f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {action_result} {amount} –±–æ–Ω—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {current_bonus}\n"
        f"‚Ä¢ –û–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ª–∏–º–∏—Ç: {total_limit} ({base_limit} –±–∞–∑–æ–≤—ã—Ö + {referral_bonus} —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö + {current_bonus} –±–æ–Ω—É—Å–Ω—ã—Ö)"
    )
    
    await update.message.reply_text(report)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
async def cancel_dev(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    chat_id = message.chat_id
    key = (chat_id, user.id)
    
    if not message.text:
        return
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    bot_username = (await context.bot.get_me()).username
    is_private = message.chat.type == "private"
    is_unlimited = chat_id == UNLIMITED_CHAT_ID
    bot_mention = f"@{bot_username}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º –±–æ—Ç—É
    is_reply_to_bot = (
        message.reply_to_message and 
        message.reply_to_message.from_user.username == bot_username
    )
    is_mention = bot_mention in message.text
    is_bot_name_in_text = bot_username in message.text.lower()
    
    # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞:
    # 1. –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    # 2. –°–æ–æ–±—â–µ–Ω–∏—è —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ (@username)
    # 3. –°–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ (–±–µ–∑ @)
    is_addressed_to_bot = is_reply_to_bot or is_mention or is_bot_name_in_text
    
    # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö (–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö) –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—É
    if not is_private and not is_addressed_to_bot:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤)
    if not is_unlimited and not is_private:
        if not check_message_limit(user.id):
            logger.warning(f"User {user.full_name} ({user.id}) exceeded daily message limit")
            
            today = datetime.utcnow().strftime("%Y-%m-%d")
            user_key = (user.id, today)
            
            base_limit = 35
            referral_bonus = user_referrals.get(user.id, 0) * 3
            bonus_messages = user_bonus_messages.get(user_key, 0)
            total_limit = base_limit + referral_bonus + bonus_messages
            
            await message.reply_text(
                f"‚ùóÔ∏è–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –ê–ª–∏—Å–æ–π ({total_limit} —Å–æ–æ–±—â–µ–Ω–∏–π).\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ –µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ - "
                "https://t.me/freedom346\n\n"
                "–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å–ª–æ –≤–∞—à–∏—Ö –¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ª—é–¥–µ–π –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n"
                "/ref - —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
            )
            return
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.full_name} –≤ —á–∞—Ç–µ {chat_id}: {message.text}")
    
    await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)
    
    try:
        history = user_contexts.get(key, [])
        user_message_content = f"{user.full_name}: {message.text}"
        user_message = {"role": "user", "content": user_message_content}
        
        messages = [{"role": "system", "content": PERSONA}]
        messages.extend(history)
        messages.append(user_message)
        
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(None, query_chat, messages)
        cleaned_response = clean_response(response)
        
        if not cleaned_response.strip():
            cleaned_response = "–Ø –æ–±–¥—É–º—ã–≤–∞—é —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å... –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É."
        
        history.append(user_message)
        history.append({"role": "assistant", "content": cleaned_response})
        
        if len(history) > 10:
            history = history[-10:]
        
        user_contexts[key] = history
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
        await message.reply_text(cleaned_response)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def post_init(application: Application) -> None:
    commands = [
        BotCommand("start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"),
        BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand("stat", "–°—Ç–∞—Ç—É—Å –∏ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è"),
        BotCommand("ref", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

def main():
    if not TOKEN:
        logger.error("TG_TOKEN environment variable is missing!")
        return
    if not NOVITA_API_KEY:
        logger.error("NOVITA_API_KEY environment variable is missing!")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    load_ref_data()

    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv('PORT', 8080))
    http_thread = threading.Thread(target=run_http_server, args=(port,), daemon=True)
    http_thread.start()

    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 45 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞...")
    time.sleep(45)

    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("ref", ref_command))
    application.add_handler(CommandHandler("clear", clear_context))
    application.add_handler(CommandHandler("stat", stat))
    
    # –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    dev_handler = ConversationHandler(
        entry_points=[CommandHandler("dev", dev)],
        states={
            SELECT_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_user)],
            SELECT_ACTION: [CallbackQueryHandler(select_action)],
            INPUT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_amount)]
        },
        fallbacks=[CommandHandler("cancel", cancel_dev)],
        allow_reentry=True
    )
    application.add_handler(dev_handler)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    
    poll_params = {
        "drop_pending_updates": True,
        "close_loop": False,
        "stop_signals": [],
        "connect_timeout": 60,
        "read_timeout": 60,
        "pool_timeout": 60
    }
    
    application.run_polling(**poll_params)

if __name__ == "__main__":
    main()
